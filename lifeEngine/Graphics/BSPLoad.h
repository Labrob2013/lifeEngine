//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef BSP_LOAD_H
#define BSP_LOAD_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <string>
#include <fstream>
using namespace std;

//////////////
// OPENGL
//////////////
#include <glm\glm.hpp>

//////////////////
// LIFEENGINE
//////////////////
#include <System\System.h>
#include <System\ResourcesManager.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Структура заголовка BSP файла
	//////////////////////////////////////////////////////////////////////
	struct BSPHeader
	{
		char		StrID[ 4 ];		///< Это всегда должно быть 'IBSP'
		int			Version;		///< Версия формата (на данный момент версия - 0x2E)
	};

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Структура одного куска BSP файла
	//////////////////////////////////////////////////////////////////////
	struct BSPLump
	{
		int			Offset;			///< Смещение в файле до начала этого куска
		int			Length;			///< Длина в байтах для этого куска	
	};

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Структура вершин BSP файла
	//////////////////////////////////////////////////////////////////////
	struct BSPVertex
	{
		glm::vec3		Position;			///< Позиция вершины
		glm::vec2		TextureCoord;		///< Текстурные координаты
		glm::vec2		LightmapCoord;		///< Координаты светокарты (lightmap)
		glm::vec3		Normal;				///< Нормаль вершины
		byte			Color[ 4 ];			///< RGBA цвет для вершин
	};

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Структура фейсов BSP файла
	//////////////////////////////////////////////////////////////////////
	struct BSPFace
	{
		int			TextureID;			///< Идентификатор текстуры
		int			Effect;				///< Индекс эффектов (-1 = n/a)
		int			Type;				///< Тип фейса (1 = полигон, 2 = патч, 3 = меш, 4 = билборд)
		int			StartVertIndex;		///< Начальный индекс первой вершины
		int			NumOfVerts;			///< Количество вершин
		int			StartIndex;			///< Начальный индекс в массиве индексов
		int			NumOfIndices;		///< Количество индексов в фейсе
		int			LightmapID;			///< Идентификатор карты освещения
		int			LMapCorner[ 2 ];	///< Угол света в изображении фейса
		int			LMapSize[ 2 ];		///< Размер секции световой карты
		glm::vec3	LMapPos;			///< Позиция световой карты.
		glm::vec3	LMapVecs[ 2 ];		///< 3D-пространство для S и T единичных векторов
		glm::vec3	Normal;				///< Нормаль фейса
		int			Size[ 2 ];			///< Габаритные размеры безье
	};

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Структура текстуры BSP файла
	//////////////////////////////////////////////////////////////////////
	struct BSPTexture
	{
		char	StrName[ 64 ];				///< Название текстуры без расширения
		int		Flags;						///< Поверхностные флаги
		int		Contents;					///< Флаги содержимого
	};

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для загрузки карт формата Quake 3 (*.bsp)
	//////////////////////////////////////////////////////////////////////
	class DLL_API BSPLoad
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Перечисление типов кусков BSP файла
		//////////////////////////////////////////////////////////////////////
		enum Lumps
		{
			Entities = 0,				///< Хранит позицию игрока, объекта и т.д
			Textures,					///< Хранит информацию про текстуры
			Planes,						///< Хранит плоскости
			Nodes,						///< Хранит BSP ветки
			Leafs,						///< Хранит листы узлов
			LeafFaces,					///< Хранит индексы листа в фейсах
			LeafBrushes,				///< Хранит индексы листа в брашах
			Models,						///< Хранит информацию о моделях
			Brushes,					///< Хранит информацию о брашах (для коллизии)
			BrushSides,					///< Хранит информацию о поверхностях браша
			Vertices,					///< Хранит вершины уровня
			Indices,					///< Хранит индексы уровня
			Shaders,					///< Хранит файлы шейдеров (смешивание, анимация ..)
			Faces,						///< Хранит фейся уровня
			Lightmaps,					///< Хранит световые карты для уровня
			LightVolumes,				///< Хранит дополнительную информацию о освещении света
			VisData,					///< Хранит PVS и информацию о кластере (видимость)
			MaxLumps					///< Константа для хранения количества кусков
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить BSP карту
		///
		/// \param[in] Route Путь к файлу
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadBSP( const string& Route );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить количество вершин
		///
		/// \return Количество вершин
		//////////////////////////////////////////////////////////////////////
		int GetNumberVertexs();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить количество фейсов
		///
		/// \return Количество фейсов
		//////////////////////////////////////////////////////////////////////
		int GetNumberFaces();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить количество индексов
		///
		/// \return Количество индексов
		//////////////////////////////////////////////////////////////////////
		int GetNumberIndices();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить количество текстур
		///
		/// \return Количество текстур
		//////////////////////////////////////////////////////////////////////
		int GetNumberTextures();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив индексов объекта для рендеринга
		///
		/// \return Массив индексов объекта для рендеринга
		//////////////////////////////////////////////////////////////////////
		unsigned int* GetPtrIndeces();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив вершин
		///
		/// \return Массив вершин
		//////////////////////////////////////////////////////////////////////
		BSPVertex* GetPtrVertexs();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив фейсов
		///
		/// \return Массив фейсов
		//////////////////////////////////////////////////////////////////////
		BSPFace* GetPtrFaces();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив индетификаторов текстур в OpenGL
		///
		/// \return Массив индетификаторов текстур в OpenGL
		//////////////////////////////////////////////////////////////////////
		GLuint* GetPtrTextures();

	private:

		int					NumOfVerts;			///< Число вершин в модели
		int					NumOfFaces;			///< Количество граней в модели
		int					NumOfIndices;		///< Число индексов для модели
		int					NumOfTextures;		///< Количество текстурных карт

		unsigned int*		PointIndices;		///< Индексы объекта для рендеринга
		BSPVertex*			PointVerts;			///< Вершины объекта
		BSPFace*			PointFaces;			///< Информация о фейсах объекта
		GLuint				TexturesID[ 1000 ];	///< Массив индетификаторов текстур в OpenGL
	};

	//-------------------------------------------------------------------------//
}

#endif // BSP_LOAD_H