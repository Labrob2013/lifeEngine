//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef BOUNDING_BOX_H
#define BOUNDING_BOX_H
#pragma warning( push )

#pragma warning( disable: 4251 ) 

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <vector>
using namespace std;

//////////////
// OPENGL
//////////////
#include <glew\glew.h>
#include <glm\glm.hpp>

////////////////
// LIFEENGINE
///////////////
#include <Graphics\Frustum.h>
#include <System\Query.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс ограничивающего тела (прямоугольный параллелепипед)
	///
	/// Данный класс используеться для оптимального (быстрого) отсичения
	/// невидимой геометрии
	//////////////////////////////////////////////////////////////////////
	class DLL_API BoundingBox
	{
	public:
		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		BoundingBox();

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор копирывания
		//////////////////////////////////////////////////////////////////////
		BoundingBox( BoundingBox& Copy );

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~BoundingBox();

		//////////////////////////////////////////////////////////////////////
		/// \brief Инициализировать ограничивающее тело
		///		
		/// \param[in] MinVertex Минимальная вершина
		/// \param[in] MaxVertex Максимальная вершина
		//////////////////////////////////////////////////////////////////////
		void InitBox( const glm::vec3& MinVertex, const glm::vec3& MaxVertex );

		//////////////////////////////////////////////////////////////////////
		/// \brief Инициализировать ограничивающее тело
		///		
		/// \param[in] Vertexs Массив вершин (макс. 8)
		//////////////////////////////////////////////////////////////////////
		void InitBox( const vector<glm::vec3>& Vertexs );

		//////////////////////////////////////////////////////////////////////
		/// \brief Провести тест на перекртие объекта
		//////////////////////////////////////////////////////////////////////
		void QueryTest();

		//////////////////////////////////////////////////////////////////////
		/// \brief Отрендерить объект
		//////////////////////////////////////////////////////////////////////
		void RenderBox();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить вершины
		///
		/// \return glm::vec3*
		//////////////////////////////////////////////////////////////////////
		glm::vec3* GetVertexs();

		BoundingBox& operator=( const BoundingBox& Copy );

		Query				Query; ///< Объект для проверки перекрытия

	private:

		GLuint				ArrayBuffer; ///< VAO буффер
		GLuint				VertexBuffer; ///< Вершиный буффер
		GLuint				IndexBuffer; ///< Индексный буффер
	
		glm::vec3			Vertexs[ 8 ]; ///< Массив вершин (мин и макс)
	};

	//-------------------------------------------------------------------------//
}

#pragma warning( pop )
#endif // BOUNDING_BOX_H

