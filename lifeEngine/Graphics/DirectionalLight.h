//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef DIRECTIONAL_LIGHT_H
#define DIRECTIONAL_LIGHT_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////////
// OPENGL
//////////////
#include <glew\glew.h>
#include <glm\glm.hpp>

////////////////
// LIFEENGINE
///////////////
#include <Graphics\BaseLight.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс направленного света
	///
	/// Данный класс необходим для работы направленного света
	//////////////////////////////////////////////////////////////////////
	class DLL_API DirectionalLight : public BaseLight
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Класс квадрата для направленого освещения
		///
		/// Данный класс используеться для создания направленого освещения
		//////////////////////////////////////////////////////////////////////
		class DLL_API LightQuad
		{
		public:
			//////////////////////////////////////////////////////////////////////
			/// \brief Конструктор
			//////////////////////////////////////////////////////////////////////
			LightQuad();

			//////////////////////////////////////////////////////////////////////
			/// \brief Конструктор копирывания
			//////////////////////////////////////////////////////////////////////
			LightQuad( const LightQuad& Copy );

			//////////////////////////////////////////////////////////////////////
			/// \brief Деструктор
			//////////////////////////////////////////////////////////////////////
			~LightQuad();

			//////////////////////////////////////////////////////////////////////
			/// \brief Инициализировать квадрат
			///		
			/// \param[in] Size Размер квадрата
			//////////////////////////////////////////////////////////////////////
			void InitQuad( float Size );

			//////////////////////////////////////////////////////////////////////
			/// \brief Отрендерить квадрат
			//////////////////////////////////////////////////////////////////////
			void RenderQuad();

			//////////////////////////////////////////////////////////////////////
			/// \brief Задать размер квадрата
			///		
			/// \param[in] Size Размер квадрата
			//////////////////////////////////////////////////////////////////////
			void SetSize( float Size );

			LightQuad& operator=( const LightQuad& Copy );

		private:

			float			Size; ///< Размер квадрата

			GLuint			ArrayBuffer; ///< VAO буффер
			GLuint			VertexBuffer; ///< Вершиный буффер
			GLuint			IndexBuffer; ///< Индексный буффер
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		DirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		///
		/// \param[in] Position Направление света
		/// \param[in] Color Цвет света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		DirectionalLight( const glm::vec3& Position, const glm::vec4& Color, const glm::vec4& Specular = glm::vec4( 0.0f, 0.0f, 0.0f, 1.0f ) );

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор копирования
		//////////////////////////////////////////////////////////////////////
		DirectionalLight( const DirectionalLight& Copy );

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~DirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Задать направление света
		///		
		/// \param[in] Position Направление света
		//////////////////////////////////////////////////////////////////////
		void SetPosition( const glm::vec3& Position );

		le::DirectionalLight& operator=( const DirectionalLight& Copy );

		LightQuad			Quad; ///< Квадрат света
	};

	//-------------------------------------------------------------------------//
}

#endif // DIRECTIONAL_LIGHT_H

