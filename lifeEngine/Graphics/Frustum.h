//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef FRUSTUM_H
#define FRUSTUM_H
#pragma warning( push )

#pragma warning( disable: 4251 ) 

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////////
// OPENGL
//////////////
#include <glm\glm.hpp>

namespace le
{
	//-------------------------------------------------------------------------//

	class BoundingBox;
	class BoundingSphere;

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы с пирамидой усечения
	///
	/// Данный класс используеться для определения видимости геометрии
	//////////////////////////////////////////////////////////////////////
	class DLL_API Frustum
	{
	public:

		//-------------------------------------------------------------------------//

		enum FrustumSide
		{
			Right,       
			Left,       
			Bottom,     
			Top,      
			Back,       
			Front        
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить пирамиду усечения
		///
		/// \param[in] Projection Матрица проекции
		/// \param[in] View Матрица вида
		//////////////////////////////////////////////////////////////////////
		void UpdateFrustum( const glm::mat4& Projection, const glm::mat4& View );

		//////////////////////////////////////////////////////////////////////
		/// \brief Видно ли ограничивающее тело
		///
		/// \param[in] BoundingBox ограничивающее тело
		/// \return true если видно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsVisible( BoundingBox& BoundingBox );

		//////////////////////////////////////////////////////////////////////
		/// \brief Видно ли ограничивающее тело
		///
		/// \param[in] MinPosition Минимальная позиция
		/// \param[in] MaxPosition Максимальная позиция
		/// \return true если видно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsVisible( glm::vec3& MinPosition, glm::vec3& MaxPosition );

		//////////////////////////////////////////////////////////////////////
		/// \brief Видно ли ограничивающее тело
		///
		/// \param[in] MinPosition Минимальная позиция
		/// \param[in] MaxPosition Максимальная позиция
		/// \return true если видно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsVisible( glm::ivec3& MinPosition, glm::ivec3& MaxPosition );

		//////////////////////////////////////////////////////////////////////
		/// \brief Видно ли ограничивающее тело
		///
		/// \param[in] BoundingSphere ограничивающее тело
		/// \return true если видно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsVisible( BoundingSphere& BoundingSphere );

		//////////////////////////////////////////////////////////////////////
		/// \brief Видно ли ограничивающее тело
		///
		/// \param[in] Position Позиция ограничивающего тела
		/// \param[in] Radius Радиус
		/// \return true если видно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsVisible( const glm::vec3& Position, float Radius );

	private:
		//////////////////////////////////////////////////////////////////////
		/// \brief Нормализация плоскостей усеченой пирамиды
		//////////////////////////////////////////////////////////////////////
		void NormalizePlanes();

		glm::vec4				PyramidFrustum[ 6 ]; ///< Пирамида усечения
	};

	//-------------------------------------------------------------------------//
}

#pragma warning( pop )
#endif // FRUSTUM_H

