#ifndef FRUSTUM_H
#define FRUSTUM_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////////
// OPENGL
//////////////
#include <glm\glm.hpp>

namespace le
{
	//-------------------------------------------------------------------------//

	class BoundingBox;

	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы с пирамидой усечения
	///
	/// Данный класс используеться для определения видимости геометрии
	//////////////////////////////////////////////////////////////////////
	class DLL_API Frustum
	{
	public:

		//-------------------------------------------------------------------------//

		enum FrustumSide
		{
			Right,       
			Left,       
			Bottom,     
			Top,      
			Back,       
			Front        
		};

		//-------------------------------------------------------------------------//

		enum PlaneData
		{
			A,              // Значение X нормали плоскости
			B,              // Значение Y нормали плоскости
			C,              // Значение Z нормали плоскости
			D               // Расстояние плоскости от начала координат
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить пирамиду усечения
		///
		/// \param[in] Projection Матрица проекции
		/// \param[in] View Матрица вида
		//////////////////////////////////////////////////////////////////////
		void UpdateFrustum( const glm::mat4& Projection, const glm::mat4& View );

		//////////////////////////////////////////////////////////////////////
		/// \brief Видно ли ограничивающее тело
		///
		/// \param[in] BoundingBox ограничивающее тело
		/// \return true если видно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool IsVisible( BoundingBox& BoundingBox );

	private:
		//////////////////////////////////////////////////////////////////////
		/// \brief Нормализовать плоскость
		///
		/// \param[in] FrustumSide сторона
		//////////////////////////////////////////////////////////////////////
		void NormalizePlane( FrustumSide FrustumSide );

		float				PyramidFrustum[ 6 ][ 4 ]; ///< Пирамида усечения
	};

	//-------------------------------------------------------------------------//
}

#endif // FRUSTUM_H

