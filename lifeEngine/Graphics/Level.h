//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef LEVEL_H
#define LEVEL_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////
// XML
//////////
#include <tinyxml.h>

//////////////////
// LIFEENGINE
//////////////////
#include <Graphics\Scene.h>
#include <Graphics\BoundingBox.h>
#include <System\Logger.h>
#include <System\System.h>
#include <System\ResourcesManager.h>

namespace le
{
	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы с уровнем
	//////////////////////////////////////////////////////////////////////
	class DLL_API Level
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Класс для работы с брашем уровня
		//////////////////////////////////////////////////////////////////////
		class DLL_API Brush
		{
		public:

			//-------------------------------------------------------------------------//

			//////////////////////////////////////////////////////////////////////
			/// \brief Структура хранит информацию вершины (позиция,
			/// нормаль и т.д ) для браша
			//////////////////////////////////////////////////////////////////////
			struct DLL_API BrushVertex
			{
				glm::vec3		Position; ///< Позиция вершины
				glm::vec3		Normal; ///< Нормаль вершины
				glm::vec2		TextureCoord; ///< Текстурная координата

				bool operator==( BrushVertex& BrushVertex );
			};

			//-------------------------------------------------------------------------//

			enum PrimitivesType
			{
				Cube,
				Sphere,
				Plane
			};

			//-------------------------------------------------------------------------//

			//////////////////////////////////////////////////////////////////////
			/// \brief Конструктор
			//////////////////////////////////////////////////////////////////////
			Brush();

			//////////////////////////////////////////////////////////////////////
			/// \brief Деструктор
			//////////////////////////////////////////////////////////////////////
			~Brush();

			//////////////////////////////////////////////////////////////////////
			/// \brief Создать браш
			///		
			/// \param[in] TypeBrush Тип браша
			/// \param[in] Position Позиция браша в мире
			/// \param[in] Texture Текстура
			/// \param[in] Vertex Вершины
			/// \param[in] Normals Нормали
			/// \param[in] TextureCoords Текстурные координаты
			//////////////////////////////////////////////////////////////////////
			void CreateBrush( const PrimitivesType& TypeBrush, const glm::vec3& Position, const GLuint& Texture, const vector<glm::vec3>& Vertex, const vector<glm::vec3>& Normals, const vector<glm::vec2>& TextureCoords );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить информацию меша для рендера
			///		
			/// \return map<GLuint, Scene::InfoMesh>&
			//////////////////////////////////////////////////////////////////////
			map<GLuint, Scene::InfoMesh>& GetRenderMesh();

		private:

			GLuint							VertexBuffer; ///< Вершиный буффер
			GLuint							IndexBuffer; ///< Индексный буффер
			GLuint							ArrayBuffer; ///< VAO буффер
			BoundingBox						BoundingBox; ///< Ограничивающее тело браша
			glm::vec3						Position; ///< Позиция браша в мире
			map<GLuint, Scene::InfoMesh>	RenderMesh; ///< Меш для рендера
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Класс для хранения энтити-объектов карты
		///
		/// Данный класс необходим для хранения энтити-объектов карты, например
		/// точка старта игрока, спавн npc и т.д
		//////////////////////////////////////////////////////////////////////
		class DLL_API Entity
		{
		public:
			//////////////////////////////////////////////////////////////////////
			/// \brief Конструктор
			///
			/// \param[in] ElementEntity Указатель на xml тег Entity 
			//////////////////////////////////////////////////////////////////////
			Entity( TiXmlElement& ElementEntity );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить название энтити
			///
			/// \return string&
			//////////////////////////////////////////////////////////////////////
			string& GetNameEntity();

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить значение энтити строкой
			///
			/// \param[in] NameValue Название значения
			/// \return string&. Если значения нету, то вернет пустую строку
			//////////////////////////////////////////////////////////////////////
			string GetValueString( const string& NameValue );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить значение энтити целочисленным числом
			///
			/// \param[in] NameValue Название значения
			/// \return int. Если значения нету, то вернет -1
			//////////////////////////////////////////////////////////////////////
			int GetValueInt( const string& NameValue );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить значение энтити дробью
			///
			/// \param[in] NameValue Название значения
			/// \return int. Если значения нету, то вернет -1
			//////////////////////////////////////////////////////////////////////
			float GetValueFloat( const string& NameValue );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить значение энтити массивом строк
			/// \details Данный метод возвращает массив чисел/слов которые
			/// были разделены пробелами, например [NameValue] "10 5 3", то вернет
			/// массив: "10", "5", "3"
			///
			/// \param[in] NameValue Название значения
			/// \return vector<string>
			//////////////////////////////////////////////////////////////////////
			vector<string> GetVelueVectorString( const string& NameValue );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить значение энтити массивом целочисленных чисел
			/// \details Данный метод возвращает массив чисел/слов которые
			/// были разделены пробелами, например [NameValue] "10 5 3", то вернет
			/// массив: 10, 5, 3
			///
			/// \param[in] NameValue Название значения
			/// \return vector<int>
			//////////////////////////////////////////////////////////////////////
			vector<int> GetVelueVectorInt( const string& NameValue );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить значение энтити массивом дробных чисел
			/// \details Данный метод возвращает массив чисел/слов которые
			/// были разделены пробелами, например [NameValue] "10.5 5.21 3.01", то вернет
			/// массив: 10.5, 5.21, 3.01
			///
			/// \param[in] NameValue Название значения
			/// \return vector<float>
			//////////////////////////////////////////////////////////////////////
			vector<float> GetVelueVectorFloat( const string& NameValue );

			//////////////////////////////////////////////////////////////////////
			/// \brief Получить позицию энтити в мире
			///
			/// \return glm::vec3&
			//////////////////////////////////////////////////////////////////////
			glm::vec3& GetPosition();

		private:

			string					NameEntity; ///< Название энтити
			glm::vec3				Position; ///< Позиция энтити в мире
			map<string, string>		Values; ///< Массив значений
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		Level();

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~Level();

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить карту
		///
		/// \param[in] Route Путь к файлу
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadLevel( const string& Route );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить на сцену
		///		
		/// \param[in] Scene Сцена
		//////////////////////////////////////////////////////////////////////
		void AddToScene( Scene& Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Удалить с сцены
		//////////////////////////////////////////////////////////////////////
		void RemoveFromScene();

		//////////////////////////////////////////////////////////////////////
		/// \brief Указать сцену (необходима для уничтожения со сцены)
		///		
		/// \param[in] Scene Сцена
		//////////////////////////////////////////////////////////////////////
		void SetScene( Scene* Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Очистить уровень
		//////////////////////////////////////////////////////////////////////
		void ClearLevel();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить энтити по названию
		///		
		/// \param[in] NameEntity Название энтити
		/// \return Entity*. Если не нашли энтити,то вернет NULL
		//////////////////////////////////////////////////////////////////////
		Entity* GetEntity( const string& NameEntity );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить все браши на уровне
		///		
		/// \return vector<Brush*>&
		//////////////////////////////////////////////////////////////////////
		vector<Brush*>& GetAllBrushes();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить все энтити на уровне
		///		
		/// \return vector<Entity*>&
		//////////////////////////////////////////////////////////////////////
		vector<Entity>& GetAllEntitys();

	private:

		Scene*							Scene; ///< Сцена на котором находится уровень
		string							NameMap; ///< Название карты
		string							DescriptionMap; ///< Описание карты
		string							SkyBoxName; ///< Название скайбокса
		vector<Brush*>					Brushes; ///< Массив брашей
		vector<Entity>					Entitys; ///< Массив энтити-объектов
	};

	//-------------------------------------------------------------------------//
}

#endif //LEVEL_H

