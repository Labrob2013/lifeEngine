//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef LIGHT_MANAGER_H
#define LIGHT_MANAGER_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <vector>
using namespace std;

////////////////
// LIFEENGINE
///////////////
#include <Graphics\PointLight.h>
#include <Graphics\DirectionalLight.h>
#include <Graphics\SpotLight.h>
#include <Graphics\Scene.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс-менеджер для работы с источниками света
	//////////////////////////////////////////////////////////////////////
	class DLL_API LightManager
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Структура хранения информации для теней
		//////////////////////////////////////////////////////////////////////
		struct InfoShadows
		{
			//////////////////////////////////////////////////////////////////////
			/// \brief Конструктор
			//////////////////////////////////////////////////////////////////////
			InfoShadows();

			//////////////////////////////////////////////////////////////////////
			/// \brief Инициализировать информацию о тенях
			///
			/// \param[in] Scene Сцена для которой будут строиться тени
			//////////////////////////////////////////////////////////////////////
			void InitInfoShadows( Scene& Scene );

			//////////////////////////////////////////////////////////////////////
			/// \brief Сбросить всю информацию о тенях
			//////////////////////////////////////////////////////////////////////
			void ClearInfoShadows();

			bool												IsEmpty; ///< Пустая ли информация о тенях

			size_t*												Visible_PointLight; ///< Кол-во видимых точечных источников света
			size_t*												Visible_SpotLight; ///< Кол-во видимых прожекторных источников света

			vector<PointLight*>*								LightBuffer_PointLight; ///< Буффер точечного света который попал в камеру
			vector<SpotLight*>*									LightBuffer_SpotLight; ///< Буффер прожекторного света который попал в камеру

			vector<le::Brush*>*									GeometryLevel; ///< Буффер рендера карты
			map<GLuint, vector<le::Scene::InfoMesh*> >*			GeometryStaticModels; ///< Буффер рендера анимируемых моделей
			map<GLuint, vector<le::Scene::InfoMesh*> >*			GeometryAnimationModels; ///< Буффер рендера статичных моделей (не анимируемых)
		};

		//-------------------------------------------------------------------------//

		enum QualityShadows
		{
			None,
			Low,
			Medium,
			High
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		//////////////////////////////////////////////////////////////////////
		LightManager();

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~LightManager();

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить все источники света на сцену
		//////////////////////////////////////////////////////////////////////
		void AddLightsToScene( Scene& Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Построить карты теней
		///
		/// \param[in] ShadowMap_PointLight Обновить карту теней у точечных источников света
		/// \param[in] ShadowMap_SpotLight Обновить карту теней у прожекторных источников света
		/// \param[in] ShadowMap_DirectionalLight Обновить карту теней у направленых источников света
		//////////////////////////////////////////////////////////////////////
		void BuildShadowMaps( bool ShadowMap_PointLight, bool ShadowMap_SpotLight, bool ShadowMap_DirectionalLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Построить карты теней
		///
		/// \param[in] Level Уровень
		/// \param[in] GeometryStaticModels Массив статичных моделей
		/// \param[in] GeometryAnimationModels Массив динамических моделей
		//////////////////////////////////////////////////////////////////////
		void BuildShadowMaps( Level& Level, map<GLuint, vector<le::Scene::InfoMesh*> >& GeometryStaticModels, map<GLuint, vector<le::Scene::InfoMesh*> >& GeometryAnimationModels );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить точечный источник света 
		/// \details Этот метод создает точечный источник по переданным
		/// характеристикам. По умолчанию источник статичный, чтобы
		/// сделать его динамичным надо получить его объект у менеджера
		/// и вызвать метод SetDinamicLight (у статичного света не обновляются
		/// карты теней)
		///
		/// \param[in] NameLight Название света
		/// \param[in] Radius Радиус света
		/// \param[in] Position Позиция света
		/// \param[in] Color Цвет света
		/// \param[in] Intensivity Интенсивность света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		void AddPointLight( const string& NameLight, float Radius, const glm::vec3& Position, const glm::vec4& Color, float Intensivity = 1.f, const glm::vec4& Specular = glm::vec4( 0.0f, 0.0f, 0.0f, 1.0f ) );
		
		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить точечный источник света 
		/// \details Этот метод создает копию точечного света и добовляет
		/// ее в менеджер
		///
		/// \param[in] NameLight Название света
		/// \param[in] PointLight Точечный свет
		//////////////////////////////////////////////////////////////////////
		void AddPointLight( const string& NameLight, const PointLight& PointLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить направленый источник света 
		/// \details Этот метод создает направленый источник по переданным
		/// характеристикам. По умолчанию источник статичный, чтобы
		/// сделать его динамичным надо получить его объект у менеджера
		/// и вызвать метод SetDinamicLight (у статичного света не обновляются
		/// карты теней)
		///
		/// \param[in] NameLight Название света
		/// \param[in] Position Направление света
		/// \param[in] Color Цвет света
		/// \param[in] Intensivity Интенсивность света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		void AddDirectionalLight( const string& NameLight, const glm::vec3& Position, const glm::vec4& Color, float Intensivity = 1.f, const glm::vec4& Specular = glm::vec4( 0.0f, 0.0f, 0.0f, 1.0f ) );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить направленый источник света 
		/// \details Этот метод создает копию направленого света и добовляет
		/// ее в менеджер
		///
		/// \param[in] NameLight Название света
		/// \param[in] DirectionalLight Направленый свет
		//////////////////////////////////////////////////////////////////////
		void AddDirectionalLight( const string& NameLight, const DirectionalLight& DirectionalLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить прожекторный источник света 
		/// \details Этот метод создает прожекторный источник по переданным
		/// характеристикам. По умолчанию источник статичный, чтобы
		/// сделать его динамичным надо получить его объект у менеджера
		/// и вызвать метод SetDinamicLight (у статичного света не обновляются
		/// карты теней)
		///
		/// \param[in] NameLight Название света
		/// \param[in] Radius Радиус конуса у света
		/// \param[in] Height Высота конуса у света
		/// \param[in] Rotation Угол поворота света
		/// \param[in] Position Позиция света
		/// \param[in] Color Цвет света
		/// \param[in] Intensivity Интенсивность света
		/// \param[in] Specular Отражение света
		//////////////////////////////////////////////////////////////////////
		void AddSpotLight( const string& NameLight, float Radius, float Height, const glm::vec3& Rotation, const glm::vec3& Position, const glm::vec4& Color, float Intensivity = 1.f, const glm::vec4& Specular = glm::vec4( 0.0f, 0.0f, 0.0f, 1.0f ) );

		//////////////////////////////////////////////////////////////////////
		/// \brief Добавить прожекторный источник света 
		/// \details Этот метод создает копию направленого света и добовляет
		/// ее в менеджер
		///
		/// \param[in] NameLight Название света
		/// \param[in] SpotLight Прожекторный свет
		//////////////////////////////////////////////////////////////////////
		void AddSpotLight( const string& NameLight, const SpotLight& SpotLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить точеный источник света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroyPointLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить направленый источник света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroyDirectionalLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить прожекторный источник света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroySpotLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все точеные источники света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllPointLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все направленные источники света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllDirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все прожекторные источники света
		///
		/// \param[in] NameLight Название света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllSpotLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Уничтожить все источники света
		//////////////////////////////////////////////////////////////////////
		void DestroyAllLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Указать сцену (необходима для уничтожения со сцены)
		///		
		/// \param[in] Scene Сцена
		//////////////////////////////////////////////////////////////////////
		void SetScene( Scene* Scene );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить точеный источник света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return PointLight*, если такого света нету то NULL
		//////////////////////////////////////////////////////////////////////
		PointLight* GetPointLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить направленый источник света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return DirectionalLight*, если такого света нету то NULL
		//////////////////////////////////////////////////////////////////////
		DirectionalLight* GetDirectionalLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить прожекторный источник света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return SpotLight*, если такого света нету то NULL
		//////////////////////////////////////////////////////////////////////
		SpotLight* GetSpotLight( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив точеных источников света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return vector<PointLight*>
		//////////////////////////////////////////////////////////////////////
		vector<PointLight*> GetPointLights( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив направленных источников света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return vector<DirectionalLight*>
		//////////////////////////////////////////////////////////////////////
		vector<DirectionalLight*> GetDirectionalLights( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив прожекторных источников света с данным именем
		///
		/// \param[in] NameLight Название света
		/// \return vector<SpotLight*>
		//////////////////////////////////////////////////////////////////////
		vector<SpotLight*> GetSpotLights( const string& NameLight );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить весь массив точеных источников света
		///
		/// \return vector<PointLight>&
		//////////////////////////////////////////////////////////////////////
		vector<PointLight>& GetAllPointLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить весь массив направленных источников света
		///
		/// \return vector<DirectionalLight>&
		//////////////////////////////////////////////////////////////////////
		vector<DirectionalLight>& GetAllDirectionalLight();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить весь массив прожекторных источников света
		///
		/// \return vector<SpotLight>&
		//////////////////////////////////////////////////////////////////////
		vector<SpotLight>& GetAllSpotLight();

	private:

		InfoShadows							InfoShadows; ///< Информация о тенях

		Scene*								Scene; ///< Сцена на котором находятся источники света	
		Shader*								ShadowMapRender; ///< Шейдер для построения карты теней

		vector<PointLight>					PointLights; ///< Массив точечных источников света
		vector<SpotLight>					SpotLights; ///< Массив прожекторных источников света
		vector<DirectionalLight>			DirectionalLights; ///< Массив направленых источников света 
	};

	//-------------------------------------------------------------------------//
}

#endif // LIGHT_MANAGER_H
