//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef MESH_H
#define MESH_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <string>
#include <vector>
#include <map>
using namespace std;

//////////////
// OPENGL
//////////////
#include <glm\glm.hpp>

//////////
// XML
//////////
#include <tinyxml.h>

//////////////////
// SFML
//////////////////
#include <SFML\OpenGL.hpp>
using namespace sf;

//////////////////
// LIFEENGINE
//////////////////
#include <System\Logger.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для загрузки мешей
	///
	/// Данный класс предназначен для загрузки сетки модели и ее хранение
	//////////////////////////////////////////////////////////////////////
	class DLL_API Mesh
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Структура хранит информацию вершины (позиция,
		/// нормаль и т.д )
		//////////////////////////////////////////////////////////////////////
		struct MeshVertex
		{
			glm::vec3		Position; ///< Позиция вершины
			glm::vec3		Normal; ///< Нормаль вершины
			glm::vec2		TextureCoord; ///< Текстурная координата

			bool operator==( MeshVertex& MeshVertex );
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить модель
		///
		/// \param[in] Route Путь к файлу
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadMesh( const string& Route );

		//////////////////////////////////////////////////////////////////////
		/// \brief Очистить меш
		/// \details Метод удаляет загруженный меш из памяти
		//////////////////////////////////////////////////////////////////////
		void ClearMesh();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив вершин для VBO	
		///
		/// \return const vector<MeshVertex>&
		//////////////////////////////////////////////////////////////////////
		const vector<MeshVertex>& GetVBO_Vertexs();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив текстур
		///
		/// \return const vector<GLuint>&
		//////////////////////////////////////////////////////////////////////
		const vector<GLuint>& GetTextures();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить массив id вершин без повторений
		///
		/// \return const map<int, vector<int>>&
		//////////////////////////////////////////////////////////////////////
		const map<int, vector<int>>& GetVertexs();

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить ID вершин, порядок соединения
		///
		/// \return const map<GLuint, vector<unsigned int>>&
		//////////////////////////////////////////////////////////////////////
		const map<GLuint, vector<unsigned int>>& GetIdVertexs();

	private:

		vector<MeshVertex>						VBO_Vertexs; ///< Массив вершин для VBO	
		vector<GLuint>							Textures; ///< Массив текстур
		map<GLuint, vector<unsigned int>>		IdVertexs; ///< ID Вершин, порядок соединения
		map<int, vector<int>>					Vertexs; ///< Массив id вершин без повторений
	};

	//-------------------------------------------------------------------------//
}

#endif // MESH_H

