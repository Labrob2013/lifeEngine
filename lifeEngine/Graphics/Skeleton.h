//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef SKELETON_H
#define SKELETON_H

#define COMPILING_LIBRARY
#include <DllGlobal.h>

//////////
// XML
//////////
#include <tinyxml.h>

//////////////////
// LIFEENGINE
//////////////////
#include <Graphics\MeshVertex.h>
#include <System\System.h>

namespace le
{
	//////////////////////////////////////////////////////////////////////
	/// \brief Класс для работы со скелетом модели
	//////////////////////////////////////////////////////////////////////
	class DLL_API Skeleton
	{
	public:

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Структура для хранения информации о кости
		//////////////////////////////////////////////////////////////////////
		struct DLL_API Bone
		{
			int				IdParent; ///< ID родительской кости
			string			Name; ///< Имя кости
			string			ParentName; ///< Имя родительской кости
			glm::mat4		StartMatrix; ///< Начальная матрица
			glm::mat4		InvertMatrix; ///< Инверт. матрица
			glm::mat4		Realese; ///< Итоговая матрица
			glm::mat4		InterpolatedMatrix; ///< Интерполированая матрица
			vector<int>		IdChild; ///< ID дочерних костей
			vector<int>		IdVertex; ///< ID вершин на которые действует кость
			vector<float>	Weights; ///< Веса кости
		};

		//-------------------------------------------------------------------------//

		//////////////////////////////////////////////////////////////////////
		/// \brief Загрузить скелет модели
		///
		/// \param[in] Skeleton Указатель на xml тег Skeleton 
		/// \return true если все прошло успешно, иначе false
		//////////////////////////////////////////////////////////////////////
		bool LoadSkeleton( TiXmlElement* Skeleton );

		//////////////////////////////////////////////////////////////////////
		/// \brief Подготовить скелет к работе
		///
		/// \param[in] VertexBuffer Вершиный буффер модели	
		/// \param[in] VBO_Vertexs  Массив вершин в VBO	
		/// \param[in] Vertexs Массив id вершин без повторений	
		//////////////////////////////////////////////////////////////////////
		void InitSkeleton( const GLuint& VertexBuffer, const vector<MeshVertex>& VBO_Vertexs, const map<int, vector<int>>& Vertexs );

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить матрицу кости
		///
		/// \param[in] NameBone Название кости
		/// \param[in] Matrix Матрица кости
		//////////////////////////////////////////////////////////////////////
		void UpdateMatrixBone( const string& NameBone, const glm::mat4& Matrix );

		//////////////////////////////////////////////////////////////////////
		/// \brief Обновить сетку модели в зависимости от положения костей
		//////////////////////////////////////////////////////////////////////
		void UpdateMesh();

	private:
		//////////////////////////////////////////////////////////////////////
		/// \brief Считать кость
		/// \details Это рекурсивный метод который нужен для считывания
		/// иерархии костей у модели
		///
		/// \param[in] Node Указатель на xml тег Node
		/// \param[out] Bone Указатель на кость
		//////////////////////////////////////////////////////////////////////
		void ReadingBone( TiXmlElement* Node, Bone* Bone );

		//////////////////////////////////////////////////////////////////////
		/// \brief Инициализировать матрицу кости
		/// \details Это рекурсивный метод который нужен для инициализации
		/// матрицы кости
		///
		/// \param[out] Bone Указатель на кость
		//////////////////////////////////////////////////////////////////////
		void InitMatrixBone( Bone& Bone );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить ID кости по имени
		///
		/// \param[in] NameBone имя кости
		/// \return int. Если такой кости нету, то вернет -1
		//////////////////////////////////////////////////////////////////////
		int GetIdBone( const string& NameBone );

		//////////////////////////////////////////////////////////////////////
		/// \brief Получить кость по имени
		///
		/// \param[in] NameBone имя кости
		/// \return Bone*. Если такой кости нету, то вернет NULL
		//////////////////////////////////////////////////////////////////////
		Bone* GetBone( const string& NameBone );

		glm::mat4					BindShape; ///< Матрица биндига модели
		GLuint						VertexBuffer; ///< Вершиный буффер модели	
		vector<Bone>				Bones; ///< Массив костей у модели
		vector<MeshVertex>			VBO_Vertexs; ///< Массив вершин в VBO	
		vector<int>					IdRootBones; ///< ID главных костей
		map<int, vector<int>>		Vertexs; ///< Массив id вершин без повторений	
	};

	//-------------------------------------------------------------------------//
}

#endif //SKELETON_H

