//////////////////////////////////////////////////////////////////////////
// 
//			*** lifeEngine (Двигатель Жизни) ***
//					Copyright (C) 2017
//
// Связь со мной:		https://vk.com/zombihello
// Репозиторий движка:  https://github.com/zombihello/lifeEngine
// 
//////////////////////////////////////////////////////////////////////////

#ifndef SYSTEM_H
#define SYSTEM_H

#define COMPILING_LIBRARY
#define ENGINE "lifeEngine"
#define ENGINE_VERSION "v3.0.0"
#include <DllGlobal.h>

///////////////////////////
// СИСТЕМНЫЕ БИБЛИОТЕКИ
///////////////////////////
#include <iostream>
using namespace std;

//////////////
// OGRE
//////////////
#include <Ogre.h>
#include <OgrePlugin.h>
#include <OgreLogManager.h>

//////////////////
// LIFEENGINE
//////////////////
#include <System/BasicApplication.h>

namespace le
{
	//-------------------------------------------------------------------------//

	//////////////////////////////////////////////////////////////////////
	/// \brief Класс необходимый для работы движка
	///
	/// Это самый главный класс в движке. Он обеспечивает базовые
	/// методы по работе с Ogre (создание и обновление окна), так же
	/// он необходим для работы других классов
	//////////////////////////////////////////////////////////////////////
	class DLL_API System
	{
	public:
		//////////////////////////////////////////////////////////////////////
		/// \brief Конструктор
		/// \details В этом конструкторе идет инициализация движка 
		///		
		/// \param[in] ConfigFile Путь к файлу конфигураций окна
		/// \param[in] LogFile Путь к файлу логов
		/// \param[in] PluginDir Путь к каталогу плагинов
		//////////////////////////////////////////////////////////////////////
		System( const string& ConfigFile, const string& LogFile, string PluginDir = "" );

		//////////////////////////////////////////////////////////////////////
		/// \brief Деструктор
		//////////////////////////////////////////////////////////////////////
		~System();

		//////////////////////////////////////////////////////////////////////
		/// \brief Создание окна
		/// \details Этот метод создает окно
		/// 
		/// \param[in] NameWindow Имя окна
		//////////////////////////////////////////////////////////////////////
		void WindowCreate( const string& NameWindow );

		//////////////////////////////////////////////////////////////////////
		/// \brief Главный цикл игры
		/// \details В этом методе происходить обновление игрового окна
		///		
		/// \param[in] Application Объект приложения
		//////////////////////////////////////////////////////////////////////
		void MainLoop( BasicApplication& Application );

		//////////////////////////////////////////////////////////////////////
		/// Возвращает главгый объект Ogre (Root)
		/// \return Ogre::Root*
		//////////////////////////////////////////////////////////////////////
		Ogre::Root* GetOgreRoot();

		//////////////////////////////////////////////////////////////////////
		/// Возвращает окно игры
		/// \return Ogre::RenderWindow*
		//////////////////////////////////////////////////////////////////////
		Ogre::RenderWindow* GetWindow();

		//////////////////////////////////////////////////////////////////////
		/// Возвращает игровую сцену
		/// \return Ogre::SceneManager*	
		//////////////////////////////////////////////////////////////////////
		Ogre::SceneManager* GetScene();

		static Ogre::LogManager			LogManager; ///< Предназначен для работы с логами

	private:
		
		Ogre::Root*						Root; ///< Главный класс который необходим для Ogre
		Ogre::RenderWindow*				Window; ///< Окно игры
		Ogre::SceneManager*				Scene; ///< Игровая сцена
	};

	//-------------------------------------------------------------------------//
}

#endif // SYSTEM_H