#include "..\Bitset.h"

//-------------------------------------------------------------------------//

le::Bitset::Bitset() :
	Bits( NULL ),
	Size( 0 )
{}

//-------------------------------------------------------------------------//

le::Bitset::~Bitset()
{
	if ( Bits )
	{
		delete Bits;
		Bits = NULL;
	}
}

//-------------------------------------------------------------------------//

void le::Bitset::Resize( int Count )
{
	Size = Count / 32 + 1;

	if ( Bits )
	{
		delete Bits;
		Bits = NULL;
	}

	Bits = new unsigned int[ Size ];
	ClearAll();
}

//-------------------------------------------------------------------------//

void le::Bitset::Set( int Byte )
{
	Bits[ Byte >> 5 ] |= ( 1 << ( Byte & 31 ) );
}

//-------------------------------------------------------------------------//

int le::Bitset::On( int Byte )
{
	return Bits[ Byte >> 5 ] & ( 1 << ( Byte & 31 ) );
}

//-------------------------------------------------------------------------//

void le::Bitset::Clear( int Byte )
{
	Bits[ Byte >> 5 ] &= ~( 1 << ( Byte & 31 ) );
}

//-------------------------------------------------------------------------//

void le::Bitset::ClearAll()
{
	memset( Bits, 0, Size * sizeof( unsigned int ) );
}

//-------------------------------------------------------------------------//